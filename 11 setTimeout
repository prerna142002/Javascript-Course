<script>
  var i = 1;
  setTimeout(function(){
    console.log(i);
   }, 1000);
}
x();
</script>

Will print the value after the time limit given in the funciton.\
The timer doesnot run on the program. Means it will not wait for 3000 miliseconds and then run the program.

<script>
  var i = 1;
  setTimeout(function(){
    console.log(i);
   }, 1000);
   console.log("Prerna");
}
x();
</script>

OUTPUT:
Prerna
1

Time, tide and javascript does not wait for anything.
The function will remember by making closure.
setTimeOut takes the callback fucntion and stores it somewhere else and attaches a timer to it.
Then goes in call stack when time is finished.

<script>
function x(){
  for(var i = 0; i<=5;i++){
    setTimeout(function() {
      console.log(i);
    }, i*1000);
  }
  console.log("Prerna");
 }
</script>

OUTPUT:
Prerna
6
6
6
6
6

Function is taken out of the the scope then also the lexcial environment is attached and closure also. The loop will run again and again as JS will not wait for
anything.

<script>
function x(){
  for(let i =0; i<=5;i++){
    setTimeout(function() {
      console.log(i);
    }, i*1000);
  }
  console.log("Prerna");
 }
</script>

OUTPUT:
Prerna
1
2
3
4
5

Let has the block scope. Each and every loop this "i" is a new copy. The call back function "i" is having its own identity. Forms a closure with the new variable.
Does not point to the global memory.



